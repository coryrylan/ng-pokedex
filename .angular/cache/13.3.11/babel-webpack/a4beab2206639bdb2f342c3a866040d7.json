{"ast":null,"code":"import { Subscriber } from './Subscriber';\nimport { Observable } from './Observable';\nimport { subscribeTo } from './util/subscribeTo';\nexport class SimpleInnerSubscriber extends Subscriber {\n  constructor(parent) {\n    super();\n    this.parent = parent;\n  }\n  _next(value) {\n    this.parent.notifyNext(value);\n  }\n  _error(error) {\n    this.parent.notifyError(error);\n    this.unsubscribe();\n  }\n  _complete() {\n    this.parent.notifyComplete();\n    this.unsubscribe();\n  }\n}\nexport class ComplexInnerSubscriber extends Subscriber {\n  constructor(parent, outerValue, outerIndex) {\n    super();\n    this.parent = parent;\n    this.outerValue = outerValue;\n    this.outerIndex = outerIndex;\n  }\n  _next(value) {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this);\n  }\n  _error(error) {\n    this.parent.notifyError(error);\n    this.unsubscribe();\n  }\n  _complete() {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\nexport class SimpleOuterSubscriber extends Subscriber {\n  notifyNext(innerValue) {\n    this.destination.next(innerValue);\n  }\n  notifyError(err) {\n    this.destination.error(err);\n  }\n  notifyComplete() {\n    this.destination.complete();\n  }\n}\nexport class ComplexOuterSubscriber extends Subscriber {\n  notifyNext(_outerValue, innerValue, _outerIndex, _innerSub) {\n    this.destination.next(innerValue);\n  }\n  notifyError(error) {\n    this.destination.error(error);\n  }\n  notifyComplete(_innerSub) {\n    this.destination.complete();\n  }\n}\nexport function innerSubscribe(result, innerSubscriber) {\n  if (innerSubscriber.closed) {\n    return undefined;\n  }\n  if (result instanceof Observable) {\n    return result.subscribe(innerSubscriber);\n  }\n  let subscription;\n  try {\n    subscription = subscribeTo(result)(innerSubscriber);\n  } catch (error) {\n    innerSubscriber.error(error);\n  }\n  return subscription;\n}\n//# sourceMappingURL=innerSubscribe.js.map","map":null,"metadata":{},"sourceType":"module"}