{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, PLATFORM_ID, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, Output, Input, ViewChild, HostListener, NgModule } from '@angular/core';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\nimport { fromEvent } from 'rxjs';\nimport { KeyCodes, trapTabFocus } from '@ngx-lite/util';\nconst _c0 = [\"nav\"];\nconst _c1 = [\"*\"];\nlet NgxNavDrawerComponent = /*#__PURE__*/(() => {\n  class NgxNavDrawerComponent {\n    constructor(platformId, changeDetectorRef) {\n      this.platformId = platformId;\n      this.changeDetectorRef = changeDetectorRef;\n      this.openChange = new EventEmitter();\n      this.fixed = false;\n      this.fixedAtWidth = '1024px';\n      this.show = false;\n      this.fixedMode = false;\n    }\n    set open(value) {\n      this.show = value;\n      this.openChange.emit(this.show);\n    }\n    ngOnInit() {\n      if (isPlatformBrowser(this.platformId)) {\n        this.setFixedPosition();\n        this.subscription = fromEvent(window, 'resize').subscribe(event => this.setFixedPosition());\n      }\n    }\n    rootClick(event) {\n      this.lastFocusedElement = event.target;\n    }\n    ngOnChanges() {\n      this.focus();\n    }\n    ngOnDestroy() {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n    }\n    outerClick(event) {\n      if (event.keyCode === KeyCodes.Escape && this.show === true) {\n        this.toggle();\n      }\n    }\n    setFixedPosition() {\n      if (isPlatformBrowser(this.platformId)) {\n        if (window.matchMedia(`(min-width: ${this.fixedAtWidth})`).matches && this.fixed) {\n          this.fixedMode = true;\n        } else {\n          this.fixedMode = false;\n        }\n        this.changeDetectorRef.detectChanges();\n      }\n    }\n    toggle() {\n      if (!this.fixedMode) {\n        this.show = !this.show;\n        this.openChange.emit(this.show);\n      }\n      this.focus();\n    }\n    focus() {\n      var _a;\n      if (this.show) {\n        trapTabFocus((_a = this.nav) === null || _a === void 0 ? void 0 : _a.nativeElement);\n      } else if (this.lastFocusedElement) {\n        this.lastFocusedElement.focus();\n      }\n    }\n  }\n  NgxNavDrawerComponent.ɵfac = function NgxNavDrawerComponent_Factory(t) {\n    return new (t || NgxNavDrawerComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  NgxNavDrawerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgxNavDrawerComponent,\n    selectors: [[\"ngx-nav-drawer\"]],\n    viewQuery: function NgxNavDrawerComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nav = _t.first);\n      }\n    },\n    hostBindings: function NgxNavDrawerComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function NgxNavDrawerComponent_click_HostBindingHandler($event) {\n          return ctx.rootClick($event);\n        }, false, i0.ɵɵresolveDocument)(\"keyup\", function NgxNavDrawerComponent_keyup_HostBindingHandler($event) {\n          return ctx.outerClick($event);\n        }, false, i0.ɵɵresolveWindow);\n      }\n    },\n    inputs: {\n      open: \"open\",\n      fixed: \"fixed\",\n      fixedAtWidth: \"fixedAtWidth\"\n    },\n    outputs: {\n      openChange: \"openChange\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c1,\n    decls: 5,\n    vars: 5,\n    consts: [[\"nav\", \"\"], [1, \"ngx-nav-drawer-overlay\", 3, \"click\"], [1, \"ngx-nav-drawer\", 3, \"click\"]],\n    template: function NgxNavDrawerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\", null, 0)(2, \"div\", 1);\n        i0.ɵɵlistener(\"click\", function NgxNavDrawerComponent_Template_div_click_2_listener() {\n          return ctx.toggle();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"nav\", 2);\n        i0.ɵɵlistener(\"click\", function NgxNavDrawerComponent_Template_nav_click_3_listener() {\n          return ctx.toggle();\n        });\n        i0.ɵɵprojection(4);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"ngx-nav-drawer-open\", ctx.show)(\"ngx-nav-drawer-fixed\", ctx.fixedMode);\n        i0.ɵɵadvance(3);\n        i0.ɵɵattribute(\"aria-hidden\", !ctx.show);\n      }\n    },\n    styles: [\"*,:after,:before{box-sizing:border-box}.ngx-nav-drawer-overlay{position:fixed;top:0;left:0;z-index:3;width:100%;height:100%;background:#00000080;display:none}.ngx-nav-drawer{top:0;bottom:0;left:0;width:240px;height:100%;left:-300px;position:fixed;z-index:4;background-color:#fff;overflow-y:auto;transition:left .3s;will-change:left;border-right:1px solid #dbdbdb}.ngx-nav-drawer a,.ngx-nav-drawer button{display:block;padding:18px 13px 16px 26px;font-size:1em;text-decoration:none;font-weight:300;color:#2d2d2d;position:relative;font-weight:700;width:100%;border:0;background:#0000;text-align:left}.ngx-nav-drawer a:active,.ngx-nav-drawer a:focus,.ngx-nav-drawer a:hover,.ngx-nav-drawer button:active,.ngx-nav-drawer button:focus,.ngx-nav-drawer button:hover{background:#f2f2f2}.ngx-nav-drawer-open .ngx-nav-drawer{left:0}.ngx-nav-drawer-open .ngx-nav-drawer-overlay{display:block}.ngx-nav-drawer-fixed .ngx-nav-drawer{left:0}.ngx-nav-drawer-fixed .ngx-nav-drawer-overlay{display:none}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return NgxNavDrawerComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet NgxNavDrawerModule = /*#__PURE__*/(() => {\n  class NgxNavDrawerModule {}\n  NgxNavDrawerModule.ɵfac = function NgxNavDrawerModule_Factory(t) {\n    return new (t || NgxNavDrawerModule)();\n  };\n  NgxNavDrawerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgxNavDrawerModule\n  });\n  NgxNavDrawerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return NgxNavDrawerModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\n * Public API Surface of ngx-nav-drawer\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxNavDrawerComponent, NgxNavDrawerModule };\n//# sourceMappingURL=ngx-lite-nav-drawer.js.map","map":null,"metadata":{},"sourceType":"module"}