{"ast":null,"code":"var KeyCodes = /*#__PURE__*/(() => {\n  (function (KeyCodes) {\n    KeyCodes[KeyCodes[\"LeftArrow\"] = 37] = \"LeftArrow\";\n    KeyCodes[KeyCodes[\"UpArrow\"] = 38] = \"UpArrow\";\n    KeyCodes[KeyCodes[\"RightArrow\"] = 39] = \"RightArrow\";\n    KeyCodes[KeyCodes[\"DownArrow\"] = 40] = \"DownArrow\";\n    KeyCodes[KeyCodes[\"Backspace\"] = 8] = \"Backspace\";\n    KeyCodes[KeyCodes[\"Tab\"] = 9] = \"Tab\";\n    KeyCodes[KeyCodes[\"Enter\"] = 13] = \"Enter\";\n    KeyCodes[KeyCodes[\"Escape\"] = 27] = \"Escape\";\n  })(KeyCodes || (KeyCodes = {}));\n  return KeyCodes;\n})();\nfunction trapTabFocus(elm) {\n  const focusableEls = elm.querySelectorAll('a, object, input, button, iframe, [tabindex]');\n  const firstFocusableEl = focusableEls[0];\n  const lastFocusableEl = focusableEls[focusableEls.length - 1];\n  // if just a single focusable item focus it\n  if (firstFocusableEl) {\n    firstFocusableEl.focus();\n  }\n  // if two or more focusable items create focus loop\n  if (firstFocusableEl && lastFocusableEl) {\n    elm.addEventListener('keydown', e => {\n      if (e.key !== 'Tab') {\n        return;\n      }\n      if (e.shiftKey && document.activeElement === firstFocusableEl) {\n        lastFocusableEl.focus();\n        e.preventDefault();\n      } else {\n        if (document.activeElement === lastFocusableEl) {\n          firstFocusableEl.focus();\n          e.preventDefault();\n        }\n      }\n    });\n  }\n}\nfunction isBrowser() {\n  return typeof window !== 'undefined';\n}\nfunction lockScroll() {\n  if (isBrowser()) {\n    document.body.style.overflow = 'hidden';\n  }\n}\nfunction unlockScroll() {\n  if (isBrowser()) {\n    document.body.style.overflow = 'initial';\n  }\n}\nfunction ariaHideBody() {\n  if (isBrowser()) {\n    document.body.setAttribute('aria-hidden', 'true');\n  }\n}\nfunction ariaShowBody() {\n  if (isBrowser()) {\n    document.body.setAttribute('aria-hidden', 'false');\n  }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { KeyCodes, ariaHideBody, ariaShowBody, isBrowser, lockScroll, trapTabFocus, unlockScroll };\n//# sourceMappingURL=ngx-lite-util.js.map","map":null,"metadata":{},"sourceType":"module"}