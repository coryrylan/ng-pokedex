{"ast":null,"code":"import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nexport function timer(dueTime = 0, periodOrScheduler, scheduler) {\n  let period = -1;\n  if (isNumeric(periodOrScheduler)) {\n    period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);\n  } else if (isScheduler(periodOrScheduler)) {\n    scheduler = periodOrScheduler;\n  }\n  if (!isScheduler(scheduler)) {\n    scheduler = async;\n  }\n  return new Observable(subscriber => {\n    const due = isNumeric(dueTime) ? dueTime : +dueTime - scheduler.now();\n    return scheduler.schedule(dispatch, due, {\n      index: 0,\n      period,\n      subscriber\n    });\n  });\n}\nfunction dispatch(state) {\n  const {\n    index,\n    period,\n    subscriber\n  } = state;\n  subscriber.next(index);\n  if (subscriber.closed) {\n    return;\n  } else if (period === -1) {\n    return subscriber.complete();\n  }\n  state.index = index + 1;\n  this.schedule(state, period);\n}\n//# sourceMappingURL=timer.js.map","map":null,"metadata":{},"sourceType":"module"}