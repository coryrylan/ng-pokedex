{"ast":null,"code":"import { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nexport class ConnectableObservable extends Observable {\n  constructor(source, subjectFactory) {\n    super();\n    this.source = source;\n    this.subjectFactory = subjectFactory;\n    this._refCount = 0;\n    this._isComplete = false;\n  }\n  _subscribe(subscriber) {\n    return this.getSubject().subscribe(subscriber);\n  }\n  getSubject() {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n  connect() {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      }\n    }\n    return connection;\n  }\n  refCount() {\n    return higherOrderRefCount()(this);\n  }\n}\nexport const connectableObservableDescriptor = (() => {\n  const connectableProto = ConnectableObservable.prototype;\n  return {\n    operator: {\n      value: null\n    },\n    _refCount: {\n      value: 0,\n      writable: true\n    },\n    _subject: {\n      value: null,\n      writable: true\n    },\n    _connection: {\n      value: null,\n      writable: true\n    },\n    _subscribe: {\n      value: connectableProto._subscribe\n    },\n    _isComplete: {\n      value: connectableProto._isComplete,\n      writable: true\n    },\n    getSubject: {\n      value: connectableProto.getSubject\n    },\n    connect: {\n      value: connectableProto.connect\n    },\n    refCount: {\n      value: connectableProto.refCount\n    }\n  };\n})();\nclass ConnectableSubscriber extends SubjectSubscriber {\n  constructor(destination, connectable) {\n    super(destination);\n    this.connectable = connectable;\n  }\n  _error(err) {\n    this._unsubscribe();\n    super._error(err);\n  }\n  _complete() {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  _unsubscribe() {\n    const connectable = this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\nclass RefCountOperator {\n  constructor(connectable) {\n    this.connectable = connectable;\n  }\n  call(subscriber, source) {\n    const {\n      connectable\n    } = this;\n    connectable._refCount++;\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n    if (!refCounter.closed) {\n      refCounter.connection = connectable.connect();\n    }\n    return subscription;\n  }\n}\nclass RefCountSubscriber extends Subscriber {\n  constructor(destination, connectable) {\n    super(destination);\n    this.connectable = connectable;\n  }\n  _unsubscribe() {\n    const {\n      connectable\n    } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n    this.connectable = null;\n    const refCount = connectable._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n    connectable._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n    const {\n      connection\n    } = this;\n    const sharedConnection = connectable._connection;\n    this.connection = null;\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}","map":{"version":3,"names":["SubjectSubscriber","Observable","Subscriber","Subscription","refCount","higherOrderRefCount","ConnectableObservable","constructor","source","subjectFactory","_refCount","_isComplete","_subscribe","subscriber","getSubject","subscribe","subject","_subject","isStopped","connect","connection","_connection","add","ConnectableSubscriber","closed","EMPTY","connectableObservableDescriptor","connectableProto","prototype","operator","value","writable","destination","connectable","_error","err","_unsubscribe","_complete","unsubscribe","RefCountOperator","call","refCounter","RefCountSubscriber","subscription","sharedConnection"],"sources":["C:/Users/keshr/Documents/Dev/Web Dev/Angular/Angular Migration/ng-pokedex/node_modules/rxjs/_esm2015/internal/observable/ConnectableObservable.js"],"sourcesContent":["import { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nexport class ConnectableObservable extends Observable {\n    constructor(source, subjectFactory) {\n        super();\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        this._refCount = 0;\n        this._isComplete = false;\n    }\n    _subscribe(subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    }\n    getSubject() {\n        const subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    }\n    connect() {\n        let connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n        }\n        return connection;\n    }\n    refCount() {\n        return higherOrderRefCount()(this);\n    }\n}\nexport const connectableObservableDescriptor = (() => {\n    const connectableProto = ConnectableObservable.prototype;\n    return {\n        operator: { value: null },\n        _refCount: { value: 0, writable: true },\n        _subject: { value: null, writable: true },\n        _connection: { value: null, writable: true },\n        _subscribe: { value: connectableProto._subscribe },\n        _isComplete: { value: connectableProto._isComplete, writable: true },\n        getSubject: { value: connectableProto.getSubject },\n        connect: { value: connectableProto.connect },\n        refCount: { value: connectableProto.refCount }\n    };\n})();\nclass ConnectableSubscriber extends SubjectSubscriber {\n    constructor(destination, connectable) {\n        super(destination);\n        this.connectable = connectable;\n    }\n    _error(err) {\n        this._unsubscribe();\n        super._error(err);\n    }\n    _complete() {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        super._complete();\n    }\n    _unsubscribe() {\n        const connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            const connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    }\n}\nclass RefCountOperator {\n    constructor(connectable) {\n        this.connectable = connectable;\n    }\n    call(subscriber, source) {\n        const { connectable } = this;\n        connectable._refCount++;\n        const refCounter = new RefCountSubscriber(subscriber, connectable);\n        const subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    }\n}\nclass RefCountSubscriber extends Subscriber {\n    constructor(destination, connectable) {\n        super(destination);\n        this.connectable = connectable;\n    }\n    _unsubscribe() {\n        const { connectable } = this;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        const refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        const { connection } = this;\n        const sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    }\n}\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,YAAY;AAC9C,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,QAAQ,IAAIC,mBAAmB,QAAQ,uBAAuB;AACvE,OAAO,MAAMC,qBAAqB,SAASL,UAAU,CAAC;EAClDM,WAAWA,CAACC,MAAM,EAAEC,cAAc,EAAE;IAChC,KAAK,CAAC,CAAC;IACP,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,SAAS,GAAG,CAAC;IAClB,IAAI,CAACC,WAAW,GAAG,KAAK;EAC5B;EACAC,UAAUA,CAACC,UAAU,EAAE;IACnB,OAAO,IAAI,CAACC,UAAU,CAAC,CAAC,CAACC,SAAS,CAACF,UAAU,CAAC;EAClD;EACAC,UAAUA,CAAA,EAAG;IACT,MAAME,OAAO,GAAG,IAAI,CAACC,QAAQ;IAC7B,IAAI,CAACD,OAAO,IAAIA,OAAO,CAACE,SAAS,EAAE;MAC/B,IAAI,CAACD,QAAQ,GAAG,IAAI,CAACR,cAAc,CAAC,CAAC;IACzC;IACA,OAAO,IAAI,CAACQ,QAAQ;EACxB;EACAE,OAAOA,CAAA,EAAG;IACN,IAAIC,UAAU,GAAG,IAAI,CAACC,WAAW;IACjC,IAAI,CAACD,UAAU,EAAE;MACb,IAAI,CAACT,WAAW,GAAG,KAAK;MACxBS,UAAU,GAAG,IAAI,CAACC,WAAW,GAAG,IAAIlB,YAAY,CAAC,CAAC;MAClDiB,UAAU,CAACE,GAAG,CAAC,IAAI,CAACd,MAAM,CACrBO,SAAS,CAAC,IAAIQ,qBAAqB,CAAC,IAAI,CAACT,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;MACnE,IAAIM,UAAU,CAACI,MAAM,EAAE;QACnB,IAAI,CAACH,WAAW,GAAG,IAAI;QACvBD,UAAU,GAAGjB,YAAY,CAACsB,KAAK;MACnC;IACJ;IACA,OAAOL,UAAU;EACrB;EACAhB,QAAQA,CAAA,EAAG;IACP,OAAOC,mBAAmB,CAAC,CAAC,CAAC,IAAI,CAAC;EACtC;AACJ;AACA,OAAO,MAAMqB,+BAA+B,GAAG,CAAC,MAAM;EAClD,MAAMC,gBAAgB,GAAGrB,qBAAqB,CAACsB,SAAS;EACxD,OAAO;IACHC,QAAQ,EAAE;MAAEC,KAAK,EAAE;IAAK,CAAC;IACzBpB,SAAS,EAAE;MAAEoB,KAAK,EAAE,CAAC;MAAEC,QAAQ,EAAE;IAAK,CAAC;IACvCd,QAAQ,EAAE;MAAEa,KAAK,EAAE,IAAI;MAAEC,QAAQ,EAAE;IAAK,CAAC;IACzCV,WAAW,EAAE;MAAES,KAAK,EAAE,IAAI;MAAEC,QAAQ,EAAE;IAAK,CAAC;IAC5CnB,UAAU,EAAE;MAAEkB,KAAK,EAAEH,gBAAgB,CAACf;IAAW,CAAC;IAClDD,WAAW,EAAE;MAAEmB,KAAK,EAAEH,gBAAgB,CAAChB,WAAW;MAAEoB,QAAQ,EAAE;IAAK,CAAC;IACpEjB,UAAU,EAAE;MAAEgB,KAAK,EAAEH,gBAAgB,CAACb;IAAW,CAAC;IAClDK,OAAO,EAAE;MAAEW,KAAK,EAAEH,gBAAgB,CAACR;IAAQ,CAAC;IAC5Cf,QAAQ,EAAE;MAAE0B,KAAK,EAAEH,gBAAgB,CAACvB;IAAS;EACjD,CAAC;AACL,CAAC,EAAE,CAAC;AACJ,MAAMmB,qBAAqB,SAASvB,iBAAiB,CAAC;EAClDO,WAAWA,CAACyB,WAAW,EAAEC,WAAW,EAAE;IAClC,KAAK,CAACD,WAAW,CAAC;IAClB,IAAI,CAACC,WAAW,GAAGA,WAAW;EAClC;EACAC,MAAMA,CAACC,GAAG,EAAE;IACR,IAAI,CAACC,YAAY,CAAC,CAAC;IACnB,KAAK,CAACF,MAAM,CAACC,GAAG,CAAC;EACrB;EACAE,SAASA,CAAA,EAAG;IACR,IAAI,CAACJ,WAAW,CAACtB,WAAW,GAAG,IAAI;IACnC,IAAI,CAACyB,YAAY,CAAC,CAAC;IACnB,KAAK,CAACC,SAAS,CAAC,CAAC;EACrB;EACAD,YAAYA,CAAA,EAAG;IACX,MAAMH,WAAW,GAAG,IAAI,CAACA,WAAW;IACpC,IAAIA,WAAW,EAAE;MACb,IAAI,CAACA,WAAW,GAAG,IAAI;MACvB,MAAMb,UAAU,GAAGa,WAAW,CAACZ,WAAW;MAC1CY,WAAW,CAACvB,SAAS,GAAG,CAAC;MACzBuB,WAAW,CAAChB,QAAQ,GAAG,IAAI;MAC3BgB,WAAW,CAACZ,WAAW,GAAG,IAAI;MAC9B,IAAID,UAAU,EAAE;QACZA,UAAU,CAACkB,WAAW,CAAC,CAAC;MAC5B;IACJ;EACJ;AACJ;AACA,MAAMC,gBAAgB,CAAC;EACnBhC,WAAWA,CAAC0B,WAAW,EAAE;IACrB,IAAI,CAACA,WAAW,GAAGA,WAAW;EAClC;EACAO,IAAIA,CAAC3B,UAAU,EAAEL,MAAM,EAAE;IACrB,MAAM;MAAEyB;IAAY,CAAC,GAAG,IAAI;IAC5BA,WAAW,CAACvB,SAAS,EAAE;IACvB,MAAM+B,UAAU,GAAG,IAAIC,kBAAkB,CAAC7B,UAAU,EAAEoB,WAAW,CAAC;IAClE,MAAMU,YAAY,GAAGnC,MAAM,CAACO,SAAS,CAAC0B,UAAU,CAAC;IACjD,IAAI,CAACA,UAAU,CAACjB,MAAM,EAAE;MACpBiB,UAAU,CAACrB,UAAU,GAAGa,WAAW,CAACd,OAAO,CAAC,CAAC;IACjD;IACA,OAAOwB,YAAY;EACvB;AACJ;AACA,MAAMD,kBAAkB,SAASxC,UAAU,CAAC;EACxCK,WAAWA,CAACyB,WAAW,EAAEC,WAAW,EAAE;IAClC,KAAK,CAACD,WAAW,CAAC;IAClB,IAAI,CAACC,WAAW,GAAGA,WAAW;EAClC;EACAG,YAAYA,CAAA,EAAG;IACX,MAAM;MAAEH;IAAY,CAAC,GAAG,IAAI;IAC5B,IAAI,CAACA,WAAW,EAAE;MACd,IAAI,CAACb,UAAU,GAAG,IAAI;MACtB;IACJ;IACA,IAAI,CAACa,WAAW,GAAG,IAAI;IACvB,MAAM7B,QAAQ,GAAG6B,WAAW,CAACvB,SAAS;IACtC,IAAIN,QAAQ,IAAI,CAAC,EAAE;MACf,IAAI,CAACgB,UAAU,GAAG,IAAI;MACtB;IACJ;IACAa,WAAW,CAACvB,SAAS,GAAGN,QAAQ,GAAG,CAAC;IACpC,IAAIA,QAAQ,GAAG,CAAC,EAAE;MACd,IAAI,CAACgB,UAAU,GAAG,IAAI;MACtB;IACJ;IACA,MAAM;MAAEA;IAAW,CAAC,GAAG,IAAI;IAC3B,MAAMwB,gBAAgB,GAAGX,WAAW,CAACZ,WAAW;IAChD,IAAI,CAACD,UAAU,GAAG,IAAI;IACtB,IAAIwB,gBAAgB,KAAK,CAACxB,UAAU,IAAIwB,gBAAgB,KAAKxB,UAAU,CAAC,EAAE;MACtEwB,gBAAgB,CAACN,WAAW,CAAC,CAAC;IAClC;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module"}