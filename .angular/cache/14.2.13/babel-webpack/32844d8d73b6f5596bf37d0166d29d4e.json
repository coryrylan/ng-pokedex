{"ast":null,"code":"import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function expand(project, concurrent = Number.POSITIVE_INFINITY, scheduler = undefined) {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n  return source => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\nexport class ExpandOperator {\n  constructor(project, concurrent, scheduler) {\n    this.project = project;\n    this.concurrent = concurrent;\n    this.scheduler = scheduler;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\nexport class ExpandSubscriber extends OuterSubscriber {\n  constructor(destination, project, concurrent, scheduler) {\n    super(destination);\n    this.project = project;\n    this.concurrent = concurrent;\n    this.scheduler = scheduler;\n    this.index = 0;\n    this.active = 0;\n    this.hasCompleted = false;\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n  static dispatch(arg) {\n    const {\n      subscriber,\n      result,\n      value,\n      index\n    } = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n  _next(value) {\n    const destination = this.destination;\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      try {\n        const {\n          project\n        } = this;\n        const result = project(value, index);\n        if (!this.scheduler) {\n          this.subscribeToProjection(result, value, index);\n        } else {\n          const state = {\n            subscriber: this,\n            result,\n            value,\n            index\n          };\n          const destination = this.destination;\n          destination.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n        }\n      } catch (e) {\n        destination.error(e);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n  subscribeToProjection(result, value, index) {\n    this.active++;\n    const destination = this.destination;\n    destination.add(subscribeToResult(this, result, value, index));\n  }\n  _complete() {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n    this.unsubscribe();\n  }\n  notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this._next(innerValue);\n  }\n  notifyComplete(innerSub) {\n    const buffer = this.buffer;\n    const destination = this.destination;\n    destination.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}","map":{"version":3,"names":["OuterSubscriber","subscribeToResult","expand","project","concurrent","Number","POSITIVE_INFINITY","scheduler","undefined","source","lift","ExpandOperator","constructor","call","subscriber","subscribe","ExpandSubscriber","destination","index","active","hasCompleted","buffer","dispatch","arg","result","value","subscribeToProjection","_next","closed","_complete","next","state","add","schedule","e","error","push","complete","unsubscribe","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyComplete","remove","length","shift"],"sources":["C:/Users/keshr/Documents/Dev/Web Dev/Angular/Angular Migration/ng-pokedex/node_modules/rxjs/_esm2015/internal/operators/expand.js"],"sourcesContent":["import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function expand(project, concurrent = Number.POSITIVE_INFINITY, scheduler = undefined) {\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return (source) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\nexport class ExpandOperator {\n    constructor(project, concurrent, scheduler) {\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n    }\n}\nexport class ExpandSubscriber extends OuterSubscriber {\n    constructor(destination, project, concurrent, scheduler) {\n        super(destination);\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n        this.index = 0;\n        this.active = 0;\n        this.hasCompleted = false;\n        if (concurrent < Number.POSITIVE_INFINITY) {\n            this.buffer = [];\n        }\n    }\n    static dispatch(arg) {\n        const { subscriber, result, value, index } = arg;\n        subscriber.subscribeToProjection(result, value, index);\n    }\n    _next(value) {\n        const destination = this.destination;\n        if (destination.closed) {\n            this._complete();\n            return;\n        }\n        const index = this.index++;\n        if (this.active < this.concurrent) {\n            destination.next(value);\n            try {\n                const { project } = this;\n                const result = project(value, index);\n                if (!this.scheduler) {\n                    this.subscribeToProjection(result, value, index);\n                }\n                else {\n                    const state = { subscriber: this, result, value, index };\n                    const destination = this.destination;\n                    destination.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n                }\n            }\n            catch (e) {\n                destination.error(e);\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    }\n    subscribeToProjection(result, value, index) {\n        this.active++;\n        const destination = this.destination;\n        destination.add(subscribeToResult(this, result, value, index));\n    }\n    _complete() {\n        this.hasCompleted = true;\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this._next(innerValue);\n    }\n    notifyComplete(innerSub) {\n        const buffer = this.buffer;\n        const destination = this.destination;\n        destination.remove(innerSub);\n        this.active--;\n        if (buffer && buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    }\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,oBAAoB;AACpD,SAASC,iBAAiB,QAAQ,2BAA2B;AAC7D,OAAO,SAASC,MAAMA,CAACC,OAAO,EAAEC,UAAU,GAAGC,MAAM,CAACC,iBAAiB,EAAEC,SAAS,GAAGC,SAAS,EAAE;EAC1FJ,UAAU,GAAG,CAACA,UAAU,IAAI,CAAC,IAAI,CAAC,GAAGC,MAAM,CAACC,iBAAiB,GAAGF,UAAU;EAC1E,OAAQK,MAAM,IAAKA,MAAM,CAACC,IAAI,CAAC,IAAIC,cAAc,CAACR,OAAO,EAAEC,UAAU,EAAEG,SAAS,CAAC,CAAC;AACtF;AACA,OAAO,MAAMI,cAAc,CAAC;EACxBC,WAAWA,CAACT,OAAO,EAAEC,UAAU,EAAEG,SAAS,EAAE;IACxC,IAAI,CAACJ,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACG,SAAS,GAAGA,SAAS;EAC9B;EACAM,IAAIA,CAACC,UAAU,EAAEL,MAAM,EAAE;IACrB,OAAOA,MAAM,CAACM,SAAS,CAAC,IAAIC,gBAAgB,CAACF,UAAU,EAAE,IAAI,CAACX,OAAO,EAAE,IAAI,CAACC,UAAU,EAAE,IAAI,CAACG,SAAS,CAAC,CAAC;EAC5G;AACJ;AACA,OAAO,MAAMS,gBAAgB,SAAShB,eAAe,CAAC;EAClDY,WAAWA,CAACK,WAAW,EAAEd,OAAO,EAAEC,UAAU,EAAEG,SAAS,EAAE;IACrD,KAAK,CAACU,WAAW,CAAC;IAClB,IAAI,CAACd,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACG,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACW,KAAK,GAAG,CAAC;IACd,IAAI,CAACC,MAAM,GAAG,CAAC;IACf,IAAI,CAACC,YAAY,GAAG,KAAK;IACzB,IAAIhB,UAAU,GAAGC,MAAM,CAACC,iBAAiB,EAAE;MACvC,IAAI,CAACe,MAAM,GAAG,EAAE;IACpB;EACJ;EACA,OAAOC,QAAQA,CAACC,GAAG,EAAE;IACjB,MAAM;MAAET,UAAU;MAAEU,MAAM;MAAEC,KAAK;MAAEP;IAAM,CAAC,GAAGK,GAAG;IAChDT,UAAU,CAACY,qBAAqB,CAACF,MAAM,EAAEC,KAAK,EAAEP,KAAK,CAAC;EAC1D;EACAS,KAAKA,CAACF,KAAK,EAAE;IACT,MAAMR,WAAW,GAAG,IAAI,CAACA,WAAW;IACpC,IAAIA,WAAW,CAACW,MAAM,EAAE;MACpB,IAAI,CAACC,SAAS,CAAC,CAAC;MAChB;IACJ;IACA,MAAMX,KAAK,GAAG,IAAI,CAACA,KAAK,EAAE;IAC1B,IAAI,IAAI,CAACC,MAAM,GAAG,IAAI,CAACf,UAAU,EAAE;MAC/Ba,WAAW,CAACa,IAAI,CAACL,KAAK,CAAC;MACvB,IAAI;QACA,MAAM;UAAEtB;QAAQ,CAAC,GAAG,IAAI;QACxB,MAAMqB,MAAM,GAAGrB,OAAO,CAACsB,KAAK,EAAEP,KAAK,CAAC;QACpC,IAAI,CAAC,IAAI,CAACX,SAAS,EAAE;UACjB,IAAI,CAACmB,qBAAqB,CAACF,MAAM,EAAEC,KAAK,EAAEP,KAAK,CAAC;QACpD,CAAC,MACI;UACD,MAAMa,KAAK,GAAG;YAAEjB,UAAU,EAAE,IAAI;YAAEU,MAAM;YAAEC,KAAK;YAAEP;UAAM,CAAC;UACxD,MAAMD,WAAW,GAAG,IAAI,CAACA,WAAW;UACpCA,WAAW,CAACe,GAAG,CAAC,IAAI,CAACzB,SAAS,CAAC0B,QAAQ,CAACjB,gBAAgB,CAACM,QAAQ,EAAE,CAAC,EAAES,KAAK,CAAC,CAAC;QACjF;MACJ,CAAC,CACD,OAAOG,CAAC,EAAE;QACNjB,WAAW,CAACkB,KAAK,CAACD,CAAC,CAAC;MACxB;IACJ,CAAC,MACI;MACD,IAAI,CAACb,MAAM,CAACe,IAAI,CAACX,KAAK,CAAC;IAC3B;EACJ;EACAC,qBAAqBA,CAACF,MAAM,EAAEC,KAAK,EAAEP,KAAK,EAAE;IACxC,IAAI,CAACC,MAAM,EAAE;IACb,MAAMF,WAAW,GAAG,IAAI,CAACA,WAAW;IACpCA,WAAW,CAACe,GAAG,CAAC/B,iBAAiB,CAAC,IAAI,EAAEuB,MAAM,EAAEC,KAAK,EAAEP,KAAK,CAAC,CAAC;EAClE;EACAW,SAASA,CAAA,EAAG;IACR,IAAI,CAACT,YAAY,GAAG,IAAI;IACxB,IAAI,IAAI,CAACA,YAAY,IAAI,IAAI,CAACD,MAAM,KAAK,CAAC,EAAE;MACxC,IAAI,CAACF,WAAW,CAACoB,QAAQ,CAAC,CAAC;IAC/B;IACA,IAAI,CAACC,WAAW,CAAC,CAAC;EACtB;EACAC,UAAUA,CAACC,UAAU,EAAEC,UAAU,EAAEC,UAAU,EAAEC,UAAU,EAAEC,QAAQ,EAAE;IACjE,IAAI,CAACjB,KAAK,CAACc,UAAU,CAAC;EAC1B;EACAI,cAAcA,CAACD,QAAQ,EAAE;IACrB,MAAMvB,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1B,MAAMJ,WAAW,GAAG,IAAI,CAACA,WAAW;IACpCA,WAAW,CAAC6B,MAAM,CAACF,QAAQ,CAAC;IAC5B,IAAI,CAACzB,MAAM,EAAE;IACb,IAAIE,MAAM,IAAIA,MAAM,CAAC0B,MAAM,GAAG,CAAC,EAAE;MAC7B,IAAI,CAACpB,KAAK,CAACN,MAAM,CAAC2B,KAAK,CAAC,CAAC,CAAC;IAC9B;IACA,IAAI,IAAI,CAAC5B,YAAY,IAAI,IAAI,CAACD,MAAM,KAAK,CAAC,EAAE;MACxC,IAAI,CAACF,WAAW,CAACoB,QAAQ,CAAC,CAAC;IAC/B;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module"}