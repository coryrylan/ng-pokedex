{"ast":null,"code":"import { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport const subscribeTo = result => {\n  if (!!result && typeof result[Symbol_observable] === 'function') {\n    return subscribeToObservable(result);\n  } else if (isArrayLike(result)) {\n    return subscribeToArray(result);\n  } else if (isPromise(result)) {\n    return subscribeToPromise(result);\n  } else if (!!result && typeof result[Symbol_iterator] === 'function') {\n    return subscribeToIterable(result);\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.` + ' You can provide an Observable, Promise, Array, or Iterable.';\n    throw new TypeError(msg);\n  }\n};","map":{"version":3,"names":["subscribeToArray","subscribeToPromise","subscribeToIterable","subscribeToObservable","isArrayLike","isPromise","isObject","iterator","Symbol_iterator","observable","Symbol_observable","subscribeTo","result","value","msg","TypeError"],"sources":["C:/Users/keshr/Documents/Dev/Web Dev/Angular/Angular Migration/ng-pokedex/node_modules/rxjs/_esm2015/internal/util/subscribeTo.js"],"sourcesContent":["import { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport const subscribeTo = (result) => {\n    if (!!result && typeof result[Symbol_observable] === 'function') {\n        return subscribeToObservable(result);\n    }\n    else if (isArrayLike(result)) {\n        return subscribeToArray(result);\n    }\n    else if (isPromise(result)) {\n        return subscribeToPromise(result);\n    }\n    else if (!!result && typeof result[Symbol_iterator] === 'function') {\n        return subscribeToIterable(result);\n    }\n    else {\n        const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n        const msg = `You provided ${value} where a stream was expected.`\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        throw new TypeError(msg);\n    }\n};\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,kBAAkB,QAAQ,sBAAsB;AACzD,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,qBAAqB,QAAQ,yBAAyB;AAC/D,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,QAAQ,QAAQ,YAAY;AACrC,SAASC,QAAQ,IAAIC,eAAe,QAAQ,oBAAoB;AAChE,SAASC,UAAU,IAAIC,iBAAiB,QAAQ,sBAAsB;AACtE,OAAO,MAAMC,WAAW,GAAIC,MAAM,IAAK;EACnC,IAAI,CAAC,CAACA,MAAM,IAAI,OAAOA,MAAM,CAACF,iBAAiB,CAAC,KAAK,UAAU,EAAE;IAC7D,OAAOP,qBAAqB,CAACS,MAAM,CAAC;EACxC,CAAC,MACI,IAAIR,WAAW,CAACQ,MAAM,CAAC,EAAE;IAC1B,OAAOZ,gBAAgB,CAACY,MAAM,CAAC;EACnC,CAAC,MACI,IAAIP,SAAS,CAACO,MAAM,CAAC,EAAE;IACxB,OAAOX,kBAAkB,CAACW,MAAM,CAAC;EACrC,CAAC,MACI,IAAI,CAAC,CAACA,MAAM,IAAI,OAAOA,MAAM,CAACJ,eAAe,CAAC,KAAK,UAAU,EAAE;IAChE,OAAON,mBAAmB,CAACU,MAAM,CAAC;EACtC,CAAC,MACI;IACD,MAAMC,KAAK,GAAGP,QAAQ,CAACM,MAAM,CAAC,GAAG,mBAAmB,GAAG,IAAIA,MAAM,GAAG;IACpE,MAAME,GAAG,GAAG,gBAAgBD,KAAK,+BAA+B,GAC1D,8DAA8D;IACpE,MAAM,IAAIE,SAAS,CAACD,GAAG,CAAC;EAC5B;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}