{"ast":null,"code":"import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function audit(durationSelector) {\n  return function auditOperatorFunction(source) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\nclass AuditOperator {\n  constructor(durationSelector) {\n    this.durationSelector = durationSelector;\n  }\n  call(subscriber, source) {\n    return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));\n  }\n}\nclass AuditSubscriber extends OuterSubscriber {\n  constructor(destination, durationSelector) {\n    super(destination);\n    this.durationSelector = durationSelector;\n    this.hasValue = false;\n  }\n  _next(value) {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      let duration;\n      try {\n        const {\n          durationSelector\n        } = this;\n        duration = durationSelector(value);\n      } catch (err) {\n        return this.destination.error(err);\n      }\n      const innerSubscription = subscribeToResult(this, duration);\n      if (!innerSubscription || innerSubscription.closed) {\n        this.clearThrottle();\n      } else {\n        this.add(this.throttled = innerSubscription);\n      }\n    }\n  }\n  clearThrottle() {\n    const {\n      value,\n      hasValue,\n      throttled\n    } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n  notifyNext(outerValue, innerValue, outerIndex, innerIndex) {\n    this.clearThrottle();\n  }\n  notifyComplete() {\n    this.clearThrottle();\n  }\n}","map":{"version":3,"names":["OuterSubscriber","subscribeToResult","audit","durationSelector","auditOperatorFunction","source","lift","AuditOperator","constructor","call","subscriber","subscribe","AuditSubscriber","destination","hasValue","_next","value","throttled","duration","err","error","innerSubscription","closed","clearThrottle","add","remove","unsubscribe","next","notifyNext","outerValue","innerValue","outerIndex","innerIndex","notifyComplete"],"sources":["C:/Users/keshr/Documents/Dev/Web Dev/Angular/Angular Migration/ng-pokedex/node_modules/rxjs/_esm2015/internal/operators/audit.js"],"sourcesContent":["import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function audit(durationSelector) {\n    return function auditOperatorFunction(source) {\n        return source.lift(new AuditOperator(durationSelector));\n    };\n}\nclass AuditOperator {\n    constructor(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));\n    }\n}\nclass AuditSubscriber extends OuterSubscriber {\n    constructor(destination, durationSelector) {\n        super(destination);\n        this.durationSelector = durationSelector;\n        this.hasValue = false;\n    }\n    _next(value) {\n        this.value = value;\n        this.hasValue = true;\n        if (!this.throttled) {\n            let duration;\n            try {\n                const { durationSelector } = this;\n                duration = durationSelector(value);\n            }\n            catch (err) {\n                return this.destination.error(err);\n            }\n            const innerSubscription = subscribeToResult(this, duration);\n            if (!innerSubscription || innerSubscription.closed) {\n                this.clearThrottle();\n            }\n            else {\n                this.add(this.throttled = innerSubscription);\n            }\n        }\n    }\n    clearThrottle() {\n        const { value, hasValue, throttled } = this;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = null;\n            throttled.unsubscribe();\n        }\n        if (hasValue) {\n            this.value = null;\n            this.hasValue = false;\n            this.destination.next(value);\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex) {\n        this.clearThrottle();\n    }\n    notifyComplete() {\n        this.clearThrottle();\n    }\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,oBAAoB;AACpD,SAASC,iBAAiB,QAAQ,2BAA2B;AAC7D,OAAO,SAASC,KAAKA,CAACC,gBAAgB,EAAE;EACpC,OAAO,SAASC,qBAAqBA,CAACC,MAAM,EAAE;IAC1C,OAAOA,MAAM,CAACC,IAAI,CAAC,IAAIC,aAAa,CAACJ,gBAAgB,CAAC,CAAC;EAC3D,CAAC;AACL;AACA,MAAMI,aAAa,CAAC;EAChBC,WAAWA,CAACL,gBAAgB,EAAE;IAC1B,IAAI,CAACA,gBAAgB,GAAGA,gBAAgB;EAC5C;EACAM,IAAIA,CAACC,UAAU,EAAEL,MAAM,EAAE;IACrB,OAAOA,MAAM,CAACM,SAAS,CAAC,IAAIC,eAAe,CAACF,UAAU,EAAE,IAAI,CAACP,gBAAgB,CAAC,CAAC;EACnF;AACJ;AACA,MAAMS,eAAe,SAASZ,eAAe,CAAC;EAC1CQ,WAAWA,CAACK,WAAW,EAAEV,gBAAgB,EAAE;IACvC,KAAK,CAACU,WAAW,CAAC;IAClB,IAAI,CAACV,gBAAgB,GAAGA,gBAAgB;IACxC,IAAI,CAACW,QAAQ,GAAG,KAAK;EACzB;EACAC,KAAKA,CAACC,KAAK,EAAE;IACT,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACF,QAAQ,GAAG,IAAI;IACpB,IAAI,CAAC,IAAI,CAACG,SAAS,EAAE;MACjB,IAAIC,QAAQ;MACZ,IAAI;QACA,MAAM;UAAEf;QAAiB,CAAC,GAAG,IAAI;QACjCe,QAAQ,GAAGf,gBAAgB,CAACa,KAAK,CAAC;MACtC,CAAC,CACD,OAAOG,GAAG,EAAE;QACR,OAAO,IAAI,CAACN,WAAW,CAACO,KAAK,CAACD,GAAG,CAAC;MACtC;MACA,MAAME,iBAAiB,GAAGpB,iBAAiB,CAAC,IAAI,EAAEiB,QAAQ,CAAC;MAC3D,IAAI,CAACG,iBAAiB,IAAIA,iBAAiB,CAACC,MAAM,EAAE;QAChD,IAAI,CAACC,aAAa,CAAC,CAAC;MACxB,CAAC,MACI;QACD,IAAI,CAACC,GAAG,CAAC,IAAI,CAACP,SAAS,GAAGI,iBAAiB,CAAC;MAChD;IACJ;EACJ;EACAE,aAAaA,CAAA,EAAG;IACZ,MAAM;MAAEP,KAAK;MAAEF,QAAQ;MAAEG;IAAU,CAAC,GAAG,IAAI;IAC3C,IAAIA,SAAS,EAAE;MACX,IAAI,CAACQ,MAAM,CAACR,SAAS,CAAC;MACtB,IAAI,CAACA,SAAS,GAAG,IAAI;MACrBA,SAAS,CAACS,WAAW,CAAC,CAAC;IAC3B;IACA,IAAIZ,QAAQ,EAAE;MACV,IAAI,CAACE,KAAK,GAAG,IAAI;MACjB,IAAI,CAACF,QAAQ,GAAG,KAAK;MACrB,IAAI,CAACD,WAAW,CAACc,IAAI,CAACX,KAAK,CAAC;IAChC;EACJ;EACAY,UAAUA,CAACC,UAAU,EAAEC,UAAU,EAAEC,UAAU,EAAEC,UAAU,EAAE;IACvD,IAAI,CAACT,aAAa,CAAC,CAAC;EACxB;EACAU,cAAcA,CAAA,EAAG;IACb,IAAI,CAACV,aAAa,CAAC,CAAC;EACxB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module"}